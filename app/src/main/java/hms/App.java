/*
 * This source file was generated by the Gradle 'init' task
 */
package hms;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.Iterator;
import java.util.UUID;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;

import hms.model.appointment.Appointment;
import hms.model.user.Doctor;
import hms.model.user.Patient;
import hms.repository.RepositoryManager;
import hms.view.MainView;

public class App {
    public static RepositoryManager rm;

    public static void main(String[] args) {
        // Prepare repositories
        rm = RepositoryManager.getInstance();

        loadPatientsFromExcel("Patient_List.xlsx");
        // loadMedicinesFromExcel("Medicine_List.xlsx");
        // loadStaffsFromExcel("Staff_List.xlsx");

        Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {
            public void run() {
                // TODO: Find a way to better save all controllers at once
                // Database.save();
            }
        }));

        // Create sample users
        Patient p1 = new Patient("P1", "abc", "first", "patient", "pass", "abc@xyz.com", "+1234");
        Doctor d1 = new Doctor("D1", "cba", "first", "doctor", "pass", "cba@xyz.com", "+1234");
        Appointment a1 = new Appointment(UUID.fromString("00000000-0000-0000-0000-000000000000"), p1, d1, LocalDateTime.of(2024, 11, 19, 10, 0, 0));

        d1.getSchedule().addSlots(LocalDate.of(2024, 11, 19), LocalDate.of(2024, 11, 19), LocalTime.of(07, 0), LocalTime.of(15, 0));

        // Save sample users
        if (rm.getUserRepository().getUserById("P1").isEmpty()) {
            System.out.println("Creating patient abc...");
            rm.getUserRepository().addUser(p1);
        }
        if (rm.getUserRepository().getUserById("D1").isEmpty()) {
            System.out.println("Creating doctor cba...");
            rm.getUserRepository().addUser(d1);
        }
        if (rm.getAppointmentRepository().getAppointmentById(UUID.fromString("00000000-0000-0000-0000-000000000000")).isEmpty()) {
            System.out.println("Creating appointment 0...");
            rm.getAppointmentRepository().addAppointment(a1);
        }

        // Initialise view
        MainView mv = new MainView();
        mv.start();

    }

    public static void loadPatientsFromExcel(String filePath) {
        try {
            FileInputStream file = new FileInputStream(new File(filePath));
            Workbook workbook = WorkbookFactory.create(file);
            Sheet sheet = workbook.getSheetAt(0);

            Iterator<Row> rowIterator = sheet.iterator();

            // Skip first row
            rowIterator.next();

            // Loop through all rows
            while (rowIterator.hasNext()) {
                Row row = rowIterator.next();

                Iterator<Cell> cellIterator = row.cellIterator();

                String patientID = cellIterator.next().getStringCellValue();
                String name = cellIterator.next().getStringCellValue();
                String firstName = name.split(" ")[0]; // TODO: Naive approach
                String lastName = name.split(" ")[1];
                String dateOfBirth = cellIterator.next().getStringCellValue();
                String gender = cellIterator.next().getStringCellValue();
                String bloodType = cellIterator.next().getStringCellValue();
                String contactInformation = cellIterator.next().getStringCellValue();

                // Create new "Patient"
                Patient patient = new Patient(patientID, patientID, firstName, lastName, "defaultPassword", contactInformation, contactInformation, dateOfBirth, gender, bloodType);

                // Check if exists, if not add
                if (RepositoryManager.getInstance().getUserRepository().getUserById(patientID) == null) {
                    RepositoryManager.getInstance().getUserRepository().addUser(patient);
                }
            }
            file.close();
            workbook.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // public static void loadMedicines(String filePath) {
    // try {
    // FileInputStream file = new FileInputStream(new File(filePath));
    // Workbook workbook = WorkbookFactory.create(file);
    // Sheet sheet = workbook.getSheetAt(0);

    // Iterator<Row> rowIterator = sheet.iterator();

    // // Skip first row
    // rowIterator.next();

    // // Loop through all rows
    // while (rowIterator.hasNext()) {
    // Row row = rowIterator.next();

    // Iterator<Cell> cellIterator = row.cellIterator();

    // String name = cellIterator.next().getStringCellValue();
    // double initialStock = cellIterator.next().getNumericCellValue();
    // double lowStock = cellIterator.next().getNumericCellValue();

    // // Create new "Patient"
    // Medication medication = new Medication(name, "", "", null, null);

    // // Check if exists, if not add
    // if (Database.getPatient(patientID) == null) {
    // Database.add(patient);
    // }
    // }
    // file.close();
    // workbook.close();
    // } catch (IOException e) {
    // e.printStackTrace();
    // }
    // }

    // public static void loadStaffsFromExcel(String filePath) {
    // try {
    // FileInputStream file = new FileInputStream(new File(filePath));
    // Workbook workbook = WorkbookFactory.create(file);
    // Sheet sheet = workbook.getSheetAt(0);

    // Iterator<Row> rowIterator = sheet.iterator();

    // // Skip first row
    // rowIterator.next();

    // // Loop through all rows
    // while (rowIterator.hasNext()) {
    // Row row = rowIterator.next();

    // Iterator<Cell> cellIterator = row.cellIterator();

    // String staffId = cellIterator.next().getStringCellValue();
    // String name = cellIterator.next().getStringCellValue();
    // String firstName = name.split(" ")[0]; // TODO: Naive approach
    // String lastName = name.split(" ")[1];
    // String role = cellIterator.next().getStringCellValue();
    // String gender = cellIterator.next().getStringCellValue();
    // int age = (int) cellIterator.next().getNumericCellValue();

    // // TODO: need to somehow solid this
    // switch (role) {
    // case "Doctor" -> {
    // Doctor doctor = new Doctor(staffId, staffId, firstName, lastName, "pass",
    // "null@email", "");

    // // Check if exists, if not add
    // if (Database.getDoctor(staffId) == null) {
    // Database.add(doctor);
    // }

    // }
    // case "Pharmacist" -> {
    // Pharmacist pharmacist = new Pharmacist(staffId, staffId, firstName, lastName,
    // "pass", "null@email", "");

    // // Check if exists, if not add
    // if (Database.getPharmacist(staffId) == null) {
    // Database.add(Pharmacist);
    // }

    // }
    // case "Administrator" -> {
    // Administrator administrator = new Administrator(staffId, staffId, firstName,
    // lastName, "pass", "null@email", "");

    // // Check if exists, if not add
    // if (Database.getAdministrator(staffId) == null) {
    // Database.add(administrator);
    // }

    // }
    // }

    // }
    // file.close();
    // workbook.close();
    // } catch (IOException e) {
    // e.printStackTrace();
    // }
    // }
}
